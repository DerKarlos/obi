// https://docs.rs/geo/latest/geo/
// https://github.com/georust/geo
// https://www.geeksforgeeks.org/dsa/how-to-check-if-a-given-point-lies-inside-a-polygon/

//use i_float::float::compatible::FloatPointCompatible;

// primitives
use geo::{
    BooleanOps,
    BoundingRect,
    Contains,
    Intersects,
    Point,
    Polygon, // LineString, MultiPolygon,
    Within,
    line_string,
    point,
    polygon,
};

fn main() {
    let point1 = point![x:1.0, y:2.0];
    let point2 = Point::new(1.0, 2.0);

    assert_eq!(point1.contains(&point2), true);

    // An L shape
    let poly = polygon![
                            //                          5   4
                            //
        (x: 0.0, y: 0.0),   // 0                        .   .
        (x: 4.0, y: 0.0),   // 1
        (x: 4.0, y: 1.0),   // 2                        .   .
        (x: 1.0, y: 1.0),   // 3
        (x: 1.0, y: 4.0),   // 4                        .  4  .  .  2
        (x: 0.0, y: 4.0),   // 5
    //  (x: 0.0, y: 0.0),   // 6 = 0 is not needed      0  .  .  .  1
    ];

    {
        // Points in linestring means ON the line but not inside => use as "0n the outer"
        let ln_s = poly.exterior();
        assert_eq!(ln_s.contains(&Point::new(0.0, 0.0)), true);
        assert_eq!(ln_s.intersects(&Point::new(0.0, 0.0)), true);
        assert_eq!(ln_s.contains(&Point::new(0.0, 0.5)), true);
        assert_eq!(ln_s.intersects(&Point::new(0.0, 0.5)), true);
        assert_eq!(ln_s.contains(&Point::new(0.5, 0.5)), false);
        assert_eq!(ln_s.intersects(&Point::new(0.5, 0.5)), false);
        assert_eq!(ln_s.contains(&Point::new(0.5, 0.00000000000000001)), false);
        assert_eq!(ln_s.contains(&Point::new(0.5, -0.0000000000000001)), false);
        assert_eq!(ln_s.contains(&Point::new(9.5, 9.5)), false);
    }

    {
        // Points in poly means INSIDE the polygon => use as "inside the outer"
        assert_eq!(poly.contains(&Point::new(0.0, 0.0)), false);
        assert_eq!(poly.intersects(&Point::new(0.0, 0.0)), true);
        assert_eq!(poly.contains(&Point::new(0.0, 0.5)), false);
        assert_eq!(poly.intersects(&Point::new(0.0, 0.5)), true);

        assert_eq!(poly.contains(&Point::new(0.5, 0.5)), true);
        assert_eq!(poly.contains(&Point::new(0.5, 0.00000000000000001)), true);
        assert_eq!(poly.contains(&Point::new(0.5, -0.000000000000001)), false);
        assert_eq!(poly.contains(&Point::new(9.5, 9.5)), false);
    }

    {
        // outside, one or two at the same point
        let out = polygon![
            (x: 0.0, y: 0.0),   // 0
            (x: 4.0, y: 0.0),   // 1
            (x: 0.0, y: -1.0),  // 2
        ];

        assert_eq!(poly.intersects(&out), true); // !!! a single identical point makes already a true
        assert_eq!(poly.contains(&out), false);
        assert_eq!(out.is_within(&poly), false);
    }

    // all points on the line or inside!
    let ins = polygon![
            (x: 0.0, y: 0.0),   // 0
            (x: 4.0, y: 0.0),   // 1                        .  .  .  .  2
            (x: 4.0, y: 1.0),   // 2
    //      (x: 0.0, y: 0.5),   // 4 = 0 is not needed      0  .  .  .  1
        ];

    assert_eq!(poly.contains(&ins), true); // what?? On the line is also inside ???
    assert_eq!(poly.intersects(&ins), true);
    assert_eq!(poly.is_within(&ins), false);
    assert_eq!(ins.is_within(&poly), true);

    // St.Pauls dome
    let dome = line_string![
        (x:-15.514121,y:12.540869),
        (x:-14.202905,y:16.01235),
        (x:-12.713897,y:18.384296),
        (x:-10.635953,y:20.624847),
        (x:-8.357993,y:22.326002 ),
        (x:-5.591105,y:23.681387),
        (x:-3.6131687,y:24.276094),
        (x:-0.6573768,y:24.670252),
        (x:2.3761992,y:24.511185 ),
        (x:5.0653033,y:23.868052),
        (x:7.365487,y:22.892986  ),
        (x:10.076816,y:21.101917),
        (x:12.443671,y:18.750713 ),
        (x:14.199368,y:16.081413),
        (x:15.299456,y:13.384455 ),
        (x:15.899503,y:10.452379),
        (x:15.955063,y:7.478814  ),
        (x:15.488359,y:4.6643004),
        (x:14.377159,y:1.649244  ),
        (x:13.188175,y:-0.37001503),
        (x:11.343583,y:-2.5898182),
        (x:9.043399,y:-4.498436),
        (x:6.1876154,y:-6.061292 ),
        (x:4.0763354,y:-6.7735686),
        (x:0.7316232,y:-7.2853045),
        (x:-1.7019048,y:-7.20924),
        (x:-4.968833,y:-6.5038843),
        (x:-7.6357126,y:-5.355948),
        (x:-10.158136,y:-3.647870),
        (x:-12.147184,y:-1.6908404),
        (x:-13.847321,y:0.7156864),
        (x:-15.214097,y:3.7791693),
        (x:-15.847481,y:6.6421084),
        (x:-15.947489,y:9.80240),

      //  (x:-15.514121,y:12.540869), // = index 0
    ];

    // St.Pauls outer
    let outer = line_string![
        (x: -42.30457,y: -28.304033),
        (x: -42.594986,y: -25.059328),
        (x: -42.06942,y: -25.003769),
        (x: -42.13857,y: -24.259264),
        (x: -35.645077,y: -23.68144),
        (x: -35.596672,y: -24.237041),
        (x: -31.426731,y: -23.870344),
        (x: -31.48205,y: -23.22585),
        (x: -24.725777,y: -22.636913),
        (x: -24.691202,y: -23.059168),
        (x: -21.434086,y: -22.770256),
        (x: -21.475574,y: -22.259106),
        (x: -14.601745,y: -21.647945),
        (x: -14.56717,y: -22.214657),
        (x: -13.806484,y: -22.170208),
        (x: -13.675099,y: -24.33705),
        (x: -14.373547,y: -24.381496),
        (x: -14.179927,y: -27.548416),
        (x: -13.336257,y: -27.492857),
        (x: -13.287851,y: -28.270697),
        (x: -10.030731,y: -28.07068),
        (x: -10.086052,y: -27.23728),
        (x: -7.880063,y: -27.103937),
        (x: -7.845487,y: -27.670649),
        (x: -7.084801,y: -27.626202),
        (x: -6.6837206,y: -34.22673),
        (x: -7.1055565,y: -34.24895),
        (x: -6.8773556,y: -38.049255),
        (x: -5.9299536,y: -37.9937),
        (x: -5.8953776,y: -38.671528),
        (x: -5.23842,y: -38.62708),
        (x: -5.1969285,y: -39.2938),
        (x: -1.0269765,y: -39.038223),
        (x: -1.061553,y: -38.415955),
        (x: 3.6063027,y: -38.082592),
        (x: 3.682372,y: -38.84932),
        (x: 5.777721,y: -38.649303),
        (x: 6.4692564,y: -39.882736),
        (x: 7.31293,y: -40.927265),
        (x: 8.336403,y: -41.794003),
        (x: 9.491267,y: -42.46072),
        (x: 10.749861,y: -42.916313),
        (x: 12.070693,y: -43.12744),
        (x: 13.412271,y: -43.105217),
        (x: 14.919816,y: -42.78297),
        (x: 16.32363,y: -42.149586),
        (x: 17.568388,y: -41.2384),
        (x: 18.605686,y: -40.093864),
        (x: 19.373285,y: -38.760426),
        (x: 19.926506,y: -37.149185),
        (x: 22.001106,y: -36.926945),
        (x: 21.911203,y: -36.049095),
        (x: 26.136473,y: -35.61573),
        (x: 26.198715,y: -36.21578),
        (x: 30.652191,y: -35.749073),
        (x: 30.569202,y: -35.026794),
        (x: 31.004868,y: -34.982346),
        (x: 30.928795,y: -34.21562),
        (x: 31.26073,y: -34.17117),
        (x: 30.852701,y: -30.337528),
        (x: 30.202662,y: -30.404202),
        (x: 29.490343,y: -23.703665),
        (x: 30.264858,y: -23.625881),
        (x: 30.202618,y: -23.025833),
        (x: 32.0905,y: -22.825817),
        (x: 32.145824,y: -23.303633),
        (x: 35.76945,y: -22.925825),
        (x: 35.714123,y: -22.348001),
        (x: 36.315758,y: -22.281328),
        (x: 35.956135,y: -18.836609),
        (x: 35.31301,y: -18.90328),
        (x: 35.09862,y: -16.89201),
        (x: 35.817814,y: -16.814224),
        (x: 35.734825,y: -16.069721),
        (x: 42.463417,y: -15.358553),
        (x: 42.518745,y: -15.869705),
        (x: 46.100872,y: -15.491897),
        (x: 46.045544,y: -14.980744),
        (x: 53.050747,y: -14.23624),
        (x: 53.106075,y: -14.747393),
        (x: 56.681286,y: -14.369585),
        (x: 56.625957,y: -13.858433),
        (x: 63.043354,y: -13.180601),
        (x: 63.112514,y: -13.825097),
        (x: 66.70155,y: -13.4472885),
        (x: 66.646225,y: -12.891688),
        (x: 69.16339,y: -12.625001),
        (x: 69.21181,y: -13.125041),
        (x: 72.75244,y: -12.758345),
        (x: 73.12587,y: -12.713897),
        (x: 73.0567,y: -12.058289),
        (x: 73.34023,y: -12.024953),
        (x: 73.21574,y: -10.824857),
        (x: 73.589165,y: -10.780409),
        (x: 73.17419,y: -6.835649),
        (x: 72.42734,y: -6.9134326),
        (x: 72.00545,y: -2.902001),
        (x: 72.696976,y: -2.8242168),
        (x: 72.61398,y: -2.0241528),
        (x: 74.20449,y: -1.3907688),
        (x: 75.552956,y: -0.2906808),
        (x: 76.382774,y: 0.7760712),
        (x: 77.13654,y: 0.4760472),
        (x: 78.623276,y: 4.176343),
        // (78.623276    4.176343)

        (x: 77.81418,y: 4.4985914),
        (x: 78.00779,y: 5.676463),
        (x: 77.97319,y: 7.321039),
        (x: 77.572075,y: 9.1767435),
        (x: 77.21938,y: 9.954583),
        (x: 77.78643,y: 10.310167),
        (x: 76.022995,y: 13.132615),
        (x: 75.36605,y: 12.721471),
        (x: 74.27342,y: 13.710439),
        (x: 72.63449,y: 14.666071),
        (x: 70.8296,y: 15.255007),
        (x: 70.71893,y: 16.310648),
        (x: 70.09656,y: 16.255087),
        (x: 69.667755,y: 20.37764),
        (x: 70.30396,y: 20.422087),
        (x: 70.06188,y: 23.900143),
        (x: 69.52249,y: 23.866808),
        (x: 69.45332,y: 24.911335),
        (x: 68.9416,y: 24.877998),
        (x: 68.90701,y: 25.344704),
        (x: 65.338745,y: 25.100239),
        (x: 65.38716,y: 24.477966),
        (x: 64.89617,y: 24.444632),
        (x: 62.828514,y: 24.300175),
        (x: 62.793934,y: 24.811327),
        (x: 58.955967,y: 24.555752),
        (x: 59.004383,y: 23.900143),
        (x: 52.303505,y: 23.166752),
        (x: 52.23435,y: 23.82236),
        (x: 48.88045,y: 23.455664),
        (x: 48.956524,y: 22.822279),
        (x: 42.449272,y: 22.099998),
        (x: 42.3732,y: 22.76672),
        (x: 38.472996,y: 22.333351),
        (x: 38.5629,y: 21.477728),
        (x: 31.924257,y: 20.710999),
        (x: 31.882761,y: 21.333271),
        (x: 31.225811,y: 21.288824),
        (x: 30.976847,y: 23.65568),
        (x: 31.509323,y: 23.700127),
        (x: 31.156624,y: 27.078175),
        (x: 30.395947,y: 27.022615),
        (x: 30.368282,y: 27.455984),
        (x: 26.772352,y: 27.21152),
        (x: 26.813847,y: 26.689255),
        (x: 24.656288,y: 26.5448),
        (x: 24.62171,y: 27.033728),
        (x: 23.916353,y: 26.989279),
        (x: 23.300865,y: 33.812046),
        (x: 23.964727,y: 33.87872),
        (x: 23.605118,y: 37.790142),
        (x: 23.141796,y: 37.745697),
        (x: 23.038063,y: 38.679104),
        (x: 22.45027,y: 38.61243),
        (x: 22.367283,y: 39.3236),
        (x: 19.538952,y: 38.99024),
        (x: 18.750616,y: 38.901344),
        (x: 18.826687,y: 38.190174),
        (x: 13.695581,y: 37.66791),
        (x: 13.57802,y: 38.44575),
        (x: 11.510365,y: 38.201286),
        (x: 10.611381,y: 39.82364),
        (x: 9.338975,y: 41.157078),
        (x: 7.783046,y: 42.134933),
        (x: 6.026576,y: 42.70165),
        (x: 4.1871247,y: 42.801655),
        (x: 2.5758758,y: 42.512745),
        (x: 1.0752707,y: 41.87936),
        (x: -0.25936925,y: 40.92373),
        (x: -1.3381461,y: 39.70141),
        (x: -2.1264834,y: 38.256847),
        (x: -2.58289,y: 36.701168),
        (x: -4.6989536,y: 36.467815),
        (x: -4.602141,y: 35.589966),
        (x: -8.633727,y: 35.04548),
        (x: -8.730539,y: 35.92333),
        (x: -12.838194,y: 35.44551),
        (x: -12.7344675,y: 34.578773),
        (x: -13.508974,y: 34.48988),
        (x: -13.439824,y: 33.867607),
        (x: -14.311145,y: 33.78982),
        (x: -13.958479,y: 29.656158),
        (x: -13.239292,y: 29.722832),
        (x: -12.706834,y: 23.400103),
        (x: -13.177072,y: 23.366768),
        (x: -13.114837,y: 22.644487),
        (x: -15.34155,y: 22.455584),
        (x: -15.3899555,y: 22.977848),
        (x: -18.688534,y: 22.700047),
        (x: -18.640131,y: 22.066664),
        (x: -19.476877,y: 21.988878),
        (x: -19.165705,y: 18.344143),
        (x: -18.550245,y: 18.399704),
        (x: -18.370457,y: 16.243975),
        (x: -18.923677,y: 16.199528),
        (x: -18.868359,y: 15.510583),
        (x: -25.527765,y: 14.9438715),
        (x: -25.569254,y: 15.443912),
        (x: -28.985397,y: 15.154999),
        (x: -28.936995,y: 14.521615),
        (x: -35.914505,y: 13.932679),
        (x: -35.96291,y: 14.477167),
        (x: -39.793972,y: 14.15492),
        (x: -39.745567,y: 13.621543),
        (x: -46.16986,y: 13.077055),
        (x: -46.23209,y: 13.810447),
        (x: -46.95128,y: 13.754888),
        (x: -47.193287,y: 16.621782),
        (x: -46.729965,y: 16.655119),
        (x: -47.054947,y: 20.49987),
        (x: -47.801796,y: 20.444311),
        (x: -47.850197,y: 21.055471),

        (x: -64.31545,y: 19.533127),
        (x: -67.53797,y: 19.177544),
        (x: -67.47574,y: 18.588608),
        (x: -74.570816,y: 17.799656),
        (x: -74.64687,y: 18.44415),
        (x: -78.11143,y: 18.055231),
        (x: -77.710396,y: 14.499392),
        (x: -76.99812,y: 14.577175),
        (x: -76.2652,y: 8.021095),
        (x: -76.92215,y: 7.9544234),
        (x: -78.623314,y: 7.765519),
        (x: -77.94572,y: 1.4872392),
        (x: -77.44096,y: -2.9686728),
        (x: -76.76336,y: -9.058049),
        (x: -76.09267,y: -15.080752),
        (x: -75.57409,y: -19.714457),
        (x: -74.87573,y: -26.11497),
        (x: -73.11924,y: -25.970512),
        (x: -72.40005,y: -25.892729),
        (x: -72.03358,y: -29.23744),
        (x: -71.67403,y: -32.537704),
        (x: -72.34482,y: -32.61549),
        (x: -71.94378,y: -36.18244),
        (x: -68.56909,y: -35.82686),
        (x: -68.63824,y: -35.22681),
        (x: -65.18748,y: -34.849),
        (x: -61.7298,y: -34.47119),
        (x: -61.667572,y: -35.08235),

        (x: -58.258305,y:     -34.715656),
    //     (-58.2583049686737 -34.71565601119995)
    //      -58.258305        -34.715656)

        (x: -41.965755,y: -32.982185),
        (x: -42.021076,y: -32.315464),
        (x: -41.49551,y: -32.271015),
        (x: -41.848156,y: -28.270697),
            ];

    println!("dome brect: {:?}", dome.bounding_rect());
    println!("outer brect: {:?}", outer.bounding_rect());

    let point0 = Point::new(0.0, 0.0); // is on the line border!

    // the dome is not ON the LineString of course
    assert_eq!(outer.intersects(&point0), false);
    assert_eq!(outer.contains(&point0), false);
    assert_eq!(outer.contains(&dome), false);
    assert_eq!(outer.intersects(&dome), false);

    // So let's try polygons
    let dome_polygon = Polygon::new(dome, vec![]);
    let outer_polygon = Polygon::new(outer, vec![]);

    assert_eq!(outer_polygon.intersects(&point0), true);
    assert_eq!(outer_polygon.contains(&point0), true);

    assert_eq!(outer_polygon.contains(&dome_polygon), true);
    assert_eq!(outer_polygon.intersects(&dome_polygon), true);

    let hole = polygon![
        ( x: -46.557167,y: 7.3988233 ),
        ( x: -62.413925,y: 5.654239  ),
        ( x: -62.09586 ,y: 2.6762233 ),
        ( x: -46.03855 ,y: 4.3207994 ),
        ( x: -45.851852,y: 2.5651033 ),
        ( x: -16.254417,y: 5.720911  ),
        ( x: -17.27785 ,y: 14.621623 ),
        ( x: -47.061943,y: 11.665832 ),
    ];

    let part = polygon![ // 664646816
        (x: -66.51505,y: -22.314665),
        (x: -62.95366,y: -21.925745),
        (x: -63.022808,y: -21.325697),
        (x: -59.751858,y: -20.970114),
        (x: -59.378468,y: -24.33705),
        (x: -59.993935,y: -24.40372),
        (x: -59.606716,y: -27.926226),
        (x: -59.254074,y: -31.182041),
        (x: -58.65244,y: -31.115368),
     // (x: -58.258305,y: -34.715656),
        (x: -58.258305,y: -34.715656),
        (x: -41.965755,y: -32.982185),
        (x: -42.021076,y: -32.315464),
        (x: -41.49551,y: -32.271015),
        (x: -41.848156,y: -28.270697),
        (x: -42.30457,y: -28.304033),
        (x: -42.594986,y: -25.059328),
        (x: -42.06942,y: -25.003769),
        (x: -42.13857,y: -24.259264),
        (x: -35.645077,y: -23.68144),
        (x: -35.596672,y: -24.237041),
        (x: -31.426731,y: -23.870344),
        (x: -31.48205,y: -23.22585),
        (x: -24.725777,y: -22.636913),
        (x: -24.691202,y: -23.059168),
        (x: -21.434086,y: -22.770256),
        (x: -21.475574,y: -22.259106),
        (x: -14.601745,y: -21.647945),
        (x: -14.56717,y: -22.214657),
        (x: -13.806484,y: -22.170208),
        (x: -13.675099,y: -24.33705),
        (x: -14.373547,y: -24.381496),
        (x: -14.179927,y: -27.548416),
        (x: -13.336257,y: -27.492857),
        (x: -13.287851,y: -28.270697),
        (x: -10.030731,y: -28.07068),
        (x: -10.086052,y: -27.23728),
        (x: -7.880063,y: -27.103937),
        (x: -7.845487,y: -27.670649),
        (x: -7.084801,y: -27.626202),
        (x: -6.6837206,y: -34.22673),
        (x: -7.1055565,y: -34.24895),
        (x: -6.8773556,y: -38.049255),
        (x: -5.9299536,y: -37.9937),
        (x: -5.8953776,y: -38.671528),
        (x: -5.23842,y: -38.62708),
        (x: -5.1969285,y: -39.2938),
        (x: -1.0269765,y: -39.038223),
        (x: -1.061553,y: -38.415955),
        (x: 3.6063027,y: -38.082592),
        (x: 3.682372,y: -38.84932),
        (x: 5.777721,y: -38.649303),
        (x: 19.926506,y: -37.149185),
        (x: 22.001106,y: -36.926945),
        (x: 21.911203,y: -36.049095),
        (x: 26.136473,y: -35.61573),
        (x: 26.198715,y: -36.21578),
        (x: 30.652191,y: -35.749073),
        (x: 30.569202,y: -35.026794),
        (x: 31.004868,y: -34.982346),
        (x: 30.928795,y: -34.21562),
        (x: 31.26073,y: -34.17117),
        (x: 30.852701,y: -30.337528),
        (x: 30.202662,y: -30.404202),
        (x: 29.490343,y: -23.703665),
        (x: 30.264858,y: -23.625881),
        (x: 30.202618,y: -23.025833),
        (x: 32.0905,y: -22.825817),
        (x: 32.145824,y: -23.303633),
        (x: 35.76945,y: -22.925825),
        (x: 35.714123,y: -22.348001),
        (x: 36.315758,y: -22.281328),
        (x: 35.956135,y: -18.836609),
        (x: 35.31301,y: -18.90328),
        (x: 35.09862,y: -16.89201),
        (x: 35.817814,y: -16.814224),
        (x: 35.734825,y: -16.069721),
        (x: 42.463417,y: -15.358553),
        (x: 42.518745,y: -15.869705),
        (x: 46.100872,y: -15.491897),
        (x: 46.045544,y: -14.980744),
        (x: 53.050747,y: -14.23624),
        (x: 53.106075,y: -14.747393),
        (x: 56.681286,y: -14.369585),
        (x: 56.625957,y: -13.858433),
        (x: 63.043354,y: -13.180601),
        (x: 63.112514,y: -13.825097),
        (x: 66.70155,y: -13.4472885),
        (x: 66.646225,y: -12.891688),
        (x: 69.16339,y: -12.625001),
        (x: 69.21181,y: -13.125041),
        (x: 72.75244,y: -12.758345),
        (x: 73.12587,y: -12.713897),
        (x: 73.0567,y: -12.058289),
        (x: 73.34023,y: -12.024953),
        (x: 73.21574,y: -10.824857),
        (x: 73.589165,y: -10.780409),
        (x: 73.17419,y: -6.835649),
        (x: 72.42734,y: -6.9134326),
        (x: 72.00545,y: -2.902001),
        (x: 72.696976,y: -2.8242168),
        (x: 72.61398,y: -2.0241528),
        (x: 74.20449,y: -1.3907688),
        (x: 75.552956,y: -0.2906808),
        (x: 76.382774,y: 0.7760712),
        (x: 77.13654,y: 0.4760472),
        (x: 78.623276,y: 4.176343),
        (x: 77.81418,y: 4.4985914),
        (x: 78.00779,y: 5.676463),
        (x: 77.97319,y: 7.321039),
        (x: 77.572075,y: 9.1767435),
        (x: 77.21938,y: 9.954583),
        (x: 77.78643,y: 10.310167),
        (x: 76.022995,y: 13.132615),
        (x: 75.36605,y: 12.721471),
        (x: 74.27342,y: 13.710439),
        (x: 72.63449,y: 14.666071),
        (x: 70.8296,y: 15.255007),
        (x: 70.71893,y: 16.310648),
        (x: 70.09656,y: 16.255087),
        (x: 69.667755,y: 20.37764),
        (x: 70.30396,y: 20.422087),
        (x: 70.06188,y: 23.900143),
        (x: 69.52249,y: 23.866808),
        (x: 69.45332,y: 24.911335),
        (x: 68.9416,y: 24.877998),
        (x: 68.90701,y: 25.344704),
        (x: 65.338745,y: 25.100239),
        (x: 65.38716,y: 24.477966),
        (x: 64.89617,y: 24.444632),
        (x: 62.828514,y: 24.300175),
        (x: 62.793934,y: 24.811327),
        (x: 58.955967,y: 24.555752),
        (x: 59.004383,y: 23.900143),
        (x: 52.303505,y: 23.166752),
        (x: 52.23435,y: 23.82236),
        (x: 48.88045,y: 23.455664),
        (x: 48.956524,y: 22.822279),
        (x: 42.449272,y: 22.099998),
        (x: 42.3732,y: 22.76672),
        (x: 38.472996,y: 22.333351),
        (x: 38.5629,y: 21.477728),
        (x: 31.924257,y: 20.710999),
        (x: 31.882761,y: 21.333271),
        (x: 31.225811,y: 21.288824),
        (x: 30.976847,y: 23.65568),
        (x: 31.509323,y: 23.700127),
        (x: 31.156624,y: 27.078175),
        (x: 30.395947,y: 27.022615),
        (x: 30.368282,y: 27.455984),
        (x: 26.772352,y: 27.21152),
        (x: 26.813847,y: 26.689255),
        (x: 24.656288,y: 26.5448),
        (x: 24.62171,y: 27.033728),
        (x: 23.916353,y: 26.989279),
        (x: 23.300865,y: 33.812046),
        (x: 23.964727,y: 33.87872),
        (x: 23.605118,y: 37.790142),
        (x: 23.141796,y: 37.745697),
        (x: 23.038063,y: 38.679104),
        (x: 22.45027,y: 38.61243),
        (x: 22.367283,y: 39.3236),
        (x: 19.538952,y: 38.99024),
        (x: 18.750616,y: 38.901344),
        (x: 18.826687,y: 38.190174),
        (x: 13.695581,y: 37.66791),
        (x: 13.57802,y: 38.44575),
        (x: 11.510365,y: 38.201286),
        (x: -2.58289,y: 36.701168),
        (x: -4.6989536,y: 36.467815),
        (x: -4.602141,y: 35.589966),
        (x: -8.633727,y: 35.04548),
        (x: -8.730539,y: 35.92333),
        (x: -12.838194,y: 35.44551),
        (x: -12.7344675,y: 34.578773),
        (x: -13.508974,y: 34.48988),
        (x: -13.439824,y: 33.867607),
        (x: -14.311145,y: 33.78982),
        (x: -13.958479,y: 29.656158),
        (x: -13.239292,y: 29.722832),
        (x: -12.706834,y: 23.400103),
        (x: -13.177072,y: 23.366768),
        (x: -13.114837,y: 22.644487),
        (x: -15.34155,y: 22.455584),
        (x: -15.3899555,y: 22.977848),
        (x: -18.688534,y: 22.700047),
        (x: -18.640131,y: 22.066664),
        (x: -19.476877,y: 21.988878),
        (x: -19.165705,y: 18.344143),
        (x: -18.550245,y: 18.399704),
        (x: -18.370457,y: 16.243975),
        (x: -18.923677,y: 16.199528),
        (x: -18.868359,y: 15.510583),
        (x: -25.527765,y: 14.9438715),
        (x: -25.569254,y: 15.443912),
        (x: -28.985397,y: 15.154999),
        (x: -28.936995,y: 14.521615),
        (x: -35.914505,y: 13.932679),
        (x: -35.96291,y: 14.477167),
        (x: -39.793972,y: 14.15492),
        (x: -39.745567,y: 13.621543),
        (x: -46.16986,y: 13.077055),
        (x: -46.23209,y: 13.810447),
        (x: -46.95128,y: 13.754888),
        (x: -47.193287,y: 16.621782),
        (x: -46.729965,y: 16.655119),
        (x: -47.054947,y: 20.49987),
        (x: -47.801796,y: 20.444311),
        (x: -47.850197,y: 21.055471),
        (x: -64.31545,y: 19.533127),
        (x: -63.94207,y: 16.21064),
        (x: -64.55061,y: 16.143967),
        (x: -63.796936,y: 9.354535),
        (x: -63.20222,y: 9.421207),
        (x: -62.801178,y: 5.820919),
        (x: -66.21042,y: 5.4431114),
        (x: -66.279564,y: 6.054271),
        (x: -69.66114,y: 5.676463),
        (x: -69.184044,y: 1.4094552),
        (x: -67.033646,y: -17.66985),
    ];

    assert_eq!(part.contains(&hole), true);

    let part = part.difference(&hole);
    //let part = MultiPolygon::new(vec![part]);

    let rect = outer_polygon.bounding_rect().unwrap();
    println!("rect: {:?}", rect);
    for poly in part.iter() {
        println!("poly");
        let (out, _hol) = poly.clone().into_inner();
        for (index, coord) in out.0.iter().enumerate() {
            if index == 9 {
                println!("{index} index 9 coord: {:?}", coord);
            }
            // for rects, contains means NOT on the line!
            //(x: 78.623276,y: 4.176343),
            if !rect.contains(coord) {
                println!("{index} in rect no coord: {:?}", coord);
            }
            let line_string = outer_polygon.exterior();
            // MultiPoly with holes has more digits and so is not ON the line
            let on_line = line_string.contains(coord);
            // for polygons, contains means NOT on the line
            let contains = outer_polygon.contains(coord);
            if index == 12 {
                println!("{index} index 12 coord: {:?}", coord);
            }
            println!("{index} coord: {:?} {contains} {on_line}", coord);
            assert_eq!(on_line || contains, true);
        }
        assert_eq!(outer_polygon.contains(&out), true);
    }

    // Ok for polygons but NOT for more digits because of MultiPolygons subtraction !!!
    assert_eq!(outer_polygon.contains(&part), true);

    //let render = outer_polygon.difference(&part);
}
