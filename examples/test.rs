// https://docs.rs/geo/latest/geo/
// https://github.com/georust/geo
// https://www.geeksforgeeks.org/dsa/how-to-check-if-a-given-point-lies-inside-a-polygon/

//use i_float::float::compatible::FloatPointCompatible;

// primitives
use geo::{
    BoundingRect, Contains, Intersects, Point, Polygon, Within, line_string, point, polygon,
};

fn main() {
    let point1 = point![x:1.0, y:2.0];
    let point2 = Point::new(1.0, 2.0);

    assert_eq!(point1.contains(&point2), true);

    // An L shape
    let poly = polygon![
                            //                          5   4
                            //
        (x: 0.0, y: 0.0),   // 0                        .   .
        (x: 4.0, y: 0.0),   // 1
        (x: 4.0, y: 1.0),   // 2                        .   .
        (x: 1.0, y: 1.0),   // 3
        (x: 1.0, y: 4.0),   // 4                        .  4  .  .  2
        (x: 0.0, y: 4.0),   // 5
    //  (x: 0.0, y: 0.0),   // 6 = 0 is not needed      0  .  .  .  1
    ];

    {
        // Points in linestring means ON the line but not inside => use as "0n the outer"
        let ln_s = poly.exterior();
        assert_eq!(ln_s.contains(&Point::new(0.0, 0.0)), true);
        assert_eq!(ln_s.intersects(&Point::new(0.0, 0.0)), true);
        assert_eq!(ln_s.contains(&Point::new(0.0, 0.5)), true);
        assert_eq!(ln_s.intersects(&Point::new(0.0, 0.5)), true);
        assert_eq!(ln_s.contains(&Point::new(0.5, 0.5)), false);
        assert_eq!(ln_s.intersects(&Point::new(0.5, 0.5)), false);
        assert_eq!(ln_s.contains(&Point::new(0.5, 0.00000000000000001)), false);
        assert_eq!(ln_s.contains(&Point::new(0.5, -0.0000000000000001)), false);
        assert_eq!(ln_s.contains(&Point::new(9.5, 9.5)), false);
    }

    {
        // Points in poly means INSIDE the polygon => use as "inside the outer"
        assert_eq!(poly.contains(&Point::new(0.0, 0.0)), false);
        assert_eq!(poly.intersects(&Point::new(0.0, 0.0)), true);
        assert_eq!(poly.contains(&Point::new(0.0, 0.5)), false);
        assert_eq!(poly.intersects(&Point::new(0.0, 0.5)), true);

        assert_eq!(poly.contains(&Point::new(0.5, 0.5)), true);
        assert_eq!(poly.contains(&Point::new(0.5, 0.00000000000000001)), true);
        assert_eq!(poly.contains(&Point::new(0.5, -0.000000000000001)), false);
        assert_eq!(poly.contains(&Point::new(9.5, 9.5)), false);
    }

    {
        // outside, one or two at the same point
        let out = polygon![
            (x: 0.0, y: 0.0),   // 0
            (x: 4.0, y: 0.0),   // 1
            (x: 0.0, y: -1.0),  // 2
        ];

        assert_eq!(poly.intersects(&out), true); // !!! a single identical point makes already a true
        assert_eq!(poly.contains(&out), false);
        assert_eq!(out.is_within(&poly), false);
    }

    // all points on the line or inside!
    let ins = polygon![
            (x: 0.0, y: 0.0),   // 0
            (x: 4.0, y: 0.0),   // 1                        .  .  .  .  2
            (x: 4.0, y: 1.0),   // 2
    //      (x: 0.0, y: 0.5),   // 4 = 0 is not needed      0  .  .  .  1
        ];

    assert_eq!(poly.contains(&ins), true); // what?? On the line is also inside ???
    assert_eq!(poly.intersects(&ins), true);
    assert_eq!(poly.is_within(&ins), false);
    assert_eq!(ins.is_within(&poly), true);

    // St.Pauls dome
    let dome = line_string![
        (x:-15.514121,y:12.540869),
        (x:-14.202905,y:16.01235),
        (x:-12.713897,y:18.384296),
        (x:-10.635953,y:20.624847),
        (x:-8.357993,y:22.326002 ),
        (x:-5.591105,y:23.681387),
        (x:-3.6131687,y:24.276094),
        (x:-0.6573768,y:24.670252),
        (x:2.3761992,y:24.511185 ),
        (x:5.0653033,y:23.868052),
        (x:7.365487,y:22.892986  ),
        (x:10.076816,y:21.101917),
        (x:12.443671,y:18.750713 ),
        (x:14.199368,y:16.081413),
        (x:15.299456,y:13.384455 ),
        (x:15.899503,y:10.452379),
        (x:15.955063,y:7.478814  ),
        (x:15.488359,y:4.6643004),
        (x:14.377159,y:1.649244  ),
        (x:13.188175,y:-0.37001503),
        (x:11.343583,y:-2.5898182),
        (x:9.043399,y:-4.498436),
        (x:6.1876154,y:-6.061292 ),
        (x:4.0763354,y:-6.7735686),
        (x:0.7316232,y:-7.2853045),
        (x:-1.7019048,y:-7.20924),
        (x:-4.968833,y:-6.5038843),
        (x:-7.6357126,y:-5.355948),
        (x:-10.158136,y:-3.647870),
        (x:-12.147184,y:-1.6908404),
        (x:-13.847321,y:0.7156864),
        (x:-15.214097,y:3.7791693),
        (x:-15.847481,y:6.6421084),
        (x:-15.947489,y:9.80240),

      //  (x:-15.514121,y:12.540869), // = index 0
    ];

    // St.Pauls outer
    let outer = line_string![
        (x: -28.304033, y: -42.30457 ),
        (x: -25.059328, y: -42.594986 ),
        (x: -25.003769, y: -42.06942 ),
        (x: -24.259264, y: -42.13857 ),
        (x: -23.68144, y: -35.645077 ),
        (x: -24.237041, y: -35.596672 ),
        (x: -23.870344, y: -31.426731 ),
        (x: -23.22585, y: -31.48205 ),
        (x: -22.636913, y: -24.725777 ),
        (x: -23.059168, y: -24.691202 ),
        (x: -22.770256, y: -21.434086 ),
        (x: -22.259106, y: -21.475574 ),
        (x: -21.647945, y: -14.601745 ),
        (x: -22.214657, y: -14.56717 ),
        (x: -22.170208, y: -13.806484 ),
        (x: -24.33705, y: -13.675099 ),
        (x: -24.381496, y: -14.373547 ),
        (x: -27.548416, y: -14.179927 ),
        (x: -27.492857, y: -13.336257 ),
        (x: -28.270697, y: -13.287851 ),
        (x: -28.07068, y: -10.030731 ),
        (x: -27.23728, y: -10.086052 ),
        (x: -27.103937, y: -7.880063 ),
        (x: -27.670649, y: -7.845487 ),
        (x: -27.626202, y: -7.084801 ),
        (x: -34.22673, y: -6.6837206 ),
        (x: -34.24895, y: -7.1055565 ),
        (x: -38.049255, y: -6.8773556 ),
        (x: -37.9937, y: -5.9299536 ),
        (x: -38.671528, y: -5.8953776 ),
        (x: -38.62708, y: -5.23842 ),
        (x: -39.2938, y: -5.1969285 ),
        (x: -39.038223, y: -1.0269765 ),
        (x: -38.415955, y: -1.061553 ),
        (x: -38.082592, y: 3.6063027 ),
        (x: -38.84932, y: 3.682372 ),
        (x: -38.649303, y: 5.777721 ),
        (x: -39.882736, y: 6.4692564 ),
        (x: -40.927265, y: 7.31293 ),
        (x: -41.794003, y: 8.336403 ),
        (x: -42.46072, y: 9.491267 ),
        (x: -42.916313, y: 10.749861 ),
        (x: -43.12744, y: 12.070693 ),
        (x: -43.105217, y: 13.412271 ),
        (x: -42.78297, y: 14.919816 ),
        (x: -42.149586, y: 16.32363 ),
        (x: -41.2384, y: 17.568388 ),
        (x: -40.093864, y: 18.605686 ),
        (x: -38.760426, y: 19.373285 ),
        (x: -37.149185, y: 19.926506 ),
        (x: -36.926945, y: 22.001106 ),
        (x: -36.049095, y: 21.911203 ),
        (x: -35.61573, y: 26.136473 ),
        (x: -36.21578, y: 26.198715 ),
        (x: -35.749073, y: 30.652191 ),
        (x: -35.026794, y: 30.569202 ),
        (x: -34.982346, y: 31.004868 ),
        (x: -34.21562, y: 30.928795 ),
        (x: -34.17117, y: 31.26073 ),
        (x: -30.337528, y: 30.852701 ),
        (x: -30.404202, y: 30.202662 ),
        (x: -23.703665, y: 29.490343 ),
        (x: -23.625881, y: 30.264858 ),
        (x: -23.025833, y: 30.202618 ),
        (x: -22.825817, y: 32.0905 ),
        (x: -23.303633, y: 32.145824 ),
        (x: -22.925825, y: 35.76945 ),
        (x: -22.348001, y: 35.714123 ),
        (x: -22.281328, y: 36.315758 ),
        (x: -18.836609, y: 35.956135 ),
        (x: -18.90328, y: 35.31301 ),
        (x: -16.89201, y: 35.09862 ),
        (x: -16.814224, y: 35.817814 ),
        (x: -16.069721, y: 35.734825 ),
        (x: -15.358553, y: 42.463417 ),
        (x: -15.869705, y: 42.518745 ),
        (x: -15.491897, y: 46.100872 ),
        (x: -14.980744, y: 46.045544 ),
        (x: -14.23624, y: 53.050747 ),
        (x: -14.747393, y: 53.106075 ),
        (x: -14.369585, y: 56.681286 ),
        (x: -13.858433, y: 56.625957 ),
        (x: -13.180601, y: 63.043354 ),
        (x: -13.825097, y: 63.112514 ),
        (x: -13.4472885, y: 66.70155 ),
        (x: -12.891688, y: 66.646225 ),
        (x: -12.625001, y: 69.16339 ),
        (x: -13.125041, y: 69.21181 ),
        (x: -12.758345, y: 72.75244 ),
        (x: -12.713897, y: 73.12587 ),
        (x: -12.058289, y: 73.0567 ),
        (x: -12.024953, y: 73.34023 ),
        (x: -10.824857, y: 73.21574 ),
        (x: -10.780409, y: 73.589165 ),
        (x: -6.835649, y: 73.17419 ),
        (x: -6.9134326, y: 72.42734 ),
        (x: -2.902001, y: 72.00545 ),
        (x: -2.8242168, y: 72.696976 ),
        (x: -2.0241528, y: 72.61398 ),
        (x: -1.3907688, y: 74.20449 ),
        (x: -0.2906808, y: 75.552956 ),
        (x: 0.7760712, y: 76.382774 ),
        (x: 0.4760472, y: 77.13654 ),
        (x: 4.176343, y: 78.623276 ),
        (x: 4.4985914, y: 77.81418 ),
        (x: 5.676463, y: 78.00779 ),
        (x: 7.321039, y: 77.97319 ),
        (x: 9.1767435, y: 77.572075 ),
        (x: 9.954583, y: 77.21938 ),
        (x: 10.310167, y: 77.78643 ),
        (x: 13.132615, y: 76.022995 ),
        (x: 12.721471, y: 75.36605 ),
        (x: 13.710439, y: 74.27342 ),
        (x: 14.666071, y: 72.63449 ),
        (x: 15.255007, y: 70.8296 ),
        (x: 16.310648, y: 70.71893 ),
        (x: 16.255087, y: 70.09656 ),
        (x: 20.37764, y: 69.667755 ),
        (x: 20.422087, y: 70.30396 ),
        (x: 23.900143, y: 70.06188 ),
        (x: 23.866808, y: 69.52249 ),
        (x: 24.911335, y: 69.45332 ),
        (x: 24.877998, y: 68.9416 ),
        (x: 25.344704, y: 68.90701 ),
        (x: 25.100239, y: 65.338745 ),
        (x: 24.477966, y: 65.38716 ),
        (x: 24.444632, y: 64.89617 ),
        (x: 24.300175, y: 62.828514 ),
        (x: 24.811327, y: 62.793934 ),
        (x: 24.555752, y: 58.955967 ),
        (x: 23.900143, y: 59.004383 ),
        (x: 23.166752, y: 52.303505 ),
        (x: 23.82236, y: 52.23435 ),
        (x: 23.455664, y: 48.88045 ),
        (x: 22.822279, y: 48.956524 ),
        (x: 22.099998, y: 42.449272 ),
        (x: 22.76672, y: 42.3732 ),
        (x: 22.333351, y: 38.472996 ),
        (x: 21.477728, y: 38.5629 ),
        (x: 20.710999, y: 31.924257 ),
        (x: 21.333271, y: 31.882761 ),
        (x: 21.288824, y: 31.225811 ),
        (x: 23.65568, y: 30.976847 ),
        (x: 23.700127, y: 31.509323 ),
        (x: 27.078175, y: 31.156624 ),
        (x: 27.022615, y: 30.395947 ),
        (x: 27.455984, y: 30.368282 ),
        (x: 27.21152, y: 26.772352 ),
        (x: 26.689255, y: 26.813847 ),
        (x: 26.5448, y: 24.656288 ),
        (x: 27.033728, y: 24.62171 ),
        (x: 26.989279, y: 23.916353 ),
        (x: 33.812046, y: 23.300865 ),
        (x: 33.87872, y: 23.964727 ),
        (x: 37.790142, y: 23.605118 ),
        (x: 37.745697, y: 23.141796 ),
        (x: 38.679104, y: 23.038063 ),
        (x: 38.61243, y: 22.45027 ),
        (x: 39.3236, y: 22.367283 ),
        (x: 38.99024, y: 19.538952 ),
        (x: 38.901344, y: 18.750616 ),
        (x: 38.190174, y: 18.826687 ),
        (x: 37.66791, y: 13.695581 ),
        (x: 38.44575, y: 13.57802 ),
        (x: 38.201286, y: 11.510365 ),
        (x: 39.82364, y: 10.611381 ),
        (x: 41.157078, y: 9.338975 ),
        (x: 42.134933, y: 7.783046 ),
        (x: 42.70165, y: 6.026576 ),
        (x: 42.801655, y: 4.1871247 ),
        (x: 42.512745, y: 2.5758758 ),
        (x: 41.87936, y: 1.0752707 ),
        (x: 40.92373, y: -0.25936925 ),
        (x: 39.70141, y: -1.3381461 ),
        (x: 38.256847, y: -2.1264834 ),
        (x: 36.701168, y: -2.58289 ),
        (x: 36.467815, y: -4.6989536 ),
        (x: 35.589966, y: -4.602141 ),
        (x: 35.04548, y: -8.633727 ),
        (x: 35.92333, y: -8.730539 ),
        (x: 35.44551, y: -12.838194 ),
        (x: 34.578773, y: -12.7344675 ),
        (x: 34.48988, y: -13.508974 ),
        (x: 33.867607, y: -13.439824 ),
        (x: 33.78982, y: -14.311145 ),
        (x: 29.656158, y: -13.958479 ),
        (x: 29.722832, y: -13.239292 ),
        (x: 23.400103, y: -12.706834 ),
        (x: 23.366768, y: -13.177072 ),
        (x: 22.644487, y: -13.114837 ),
        (x: 22.455584, y: -15.34155 ),
        (x: 22.977848, y: -15.3899555 ),
        (x: 22.700047, y: -18.688534 ),
        (x: 22.066664, y: -18.640131 ),
        (x: 21.988878, y: -19.476877 ),
        (x: 18.344143, y: -19.165705 ),
        (x: 18.399704, y: -18.550245 ),
        (x: 16.243975, y: -18.370457 ),
        (x: 16.199528, y: -18.923677 ),
        (x: 15.510583, y: -18.868359 ),
        (x: 14.9438715, y: -25.527765 ),
        (x: 15.443912, y: -25.569254 ),
        (x: 15.154999, y: -28.985397 ),
        (x: 14.521615, y: -28.936995 ),
        (x: 13.932679, y: -35.914505 ),
        (x: 14.477167, y: -35.96291 ),
        (x: 14.15492, y: -39.793972 ),
        (x: 13.621543, y: -39.745567 ),
        (x: 13.077055, y: -46.16986 ),
        (x: 13.810447, y: -46.23209 ),
        (x: 13.754888, y: -46.95128 ),
        (x: 16.621782, y: -47.193287 ),
        (x: 16.655119, y: -46.729965 ),
        (x: 20.49987, y: -47.054947 ),
        (x: 20.444311, y: -47.801796 ),
        (x: 21.055471, y: -47.850197 ),
        (x: 19.533127, y: -64.31545 ),
        (x: 19.177544, y: -67.53797 ),
        (x: 18.588608, y: -67.47574 ),
        (x: 17.799656, y: -74.570816 ),
        (x: 18.44415, y: -74.64687 ),
        (x: 18.055231, y: -78.11143 ),
        (x: 14.499392, y: -77.710396 ),
        (x: 14.577175, y: -76.99812 ),
        (x: 8.021095, y: -76.2652 ),
        (x: 7.9544234, y: -76.92215 ),
        (x: 7.765519, y: -78.623314 ),
        (x: 1.4872392, y: -77.94572 ),
        (x: -2.9686728, y: -77.44096 ),
        (x: -9.058049, y: -76.76336 ),
        (x: -15.080752, y: -76.09267 ),
        (x: -19.714457, y: -75.57409 ),
        (x: -26.11497, y: -74.87573 ),
        (x: -25.970512, y: -73.11924 ),
        (x: -25.892729, y: -72.40005 ),
        (x: -29.23744, y: -72.03358 ),
        (x: -32.537704, y: -71.67403 ),
        (x: -32.61549, y: -72.34482 ),
        (x: -36.18244, y: -71.94378 ),
        (x: -35.82686, y: -68.56909 ),
        (x: -35.22681, y: -68.63824 ),
        (x: -34.849, y: -65.18748 ),
        (x: -34.47119, y: -61.7298 ),
        (x: -35.08235, y: -61.667572 ),
        (x: -34.715656, y: -58.258305 ),
        (x: -32.982185, y: -41.965755 ),
        (x: -32.315464, y: -42.021076 ),
        (x: -32.271015, y: -41.49551 ),
        (x: -28.270697, y: -41.848156 ),

      //  (x: -28.304033, y: -42.30457 ), // = index 0
    ];

    println!("dome brect: {:?}", dome.bounding_rect());
    println!("outer brect: {:?}", outer.bounding_rect());

    let point0 = Point::new(0.0, 0.0); // is on the line border!

    // the dome is not ON the LineString of course
    assert_eq!(outer.intersects(&point0), false);
    assert_eq!(outer.contains(&point0), false);
    assert_eq!(outer.contains(&dome), false);
    assert_eq!(outer.intersects(&dome), false);

    // So let's try polygons
    let dome_polygon = Polygon::new(dome, vec![]);
    let outer_polygon = Polygon::new(outer, vec![]);

    assert_eq!(outer_polygon.intersects(&point0), true);
    assert_eq!(outer_polygon.contains(&point0), true);

    assert_eq!(outer_polygon.contains(&dome_polygon), true);
    assert_eq!(outer_polygon.intersects(&dome_polygon), true);
}
