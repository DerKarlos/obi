// https://docs.rs/geo/latest/geo/
// https://github.com/georust/geo
// https://www.geeksforgeeks.org/dsa/how-to-check-if-a-given-point-lies-inside-a-polygon/

//use i_float::float::compatible::FloatPointCompatible;

// primitives
use geo::{
    BoundingRect,
    Contains,
    Intersects,
    MultiPolygon,
    Point,
    Polygon, // LineString, MultiPolygon,
    TriangulateEarcut,
    Within,
    line_string,
    point,
    polygon,
};

fn main() {
    // An L shape
    let polygon = polygon![
                            //                          5   .   .   4
                            //
        (x: 0.0, y: 0.0),   // 0                        .   .   .   3   2
        (x: 4.0, y: 0.0),   // 1
        (x: 4.0, y: 3.0),   // 2                        .   .   .   .   .
        (x: 3.0, y: 3.0),   // 3
        (x: 3.0, y: 4.0),   // 4                        .   .   .   .   .
        (x: 0.0, y: 4.0),   // 5
        (x: 0.0, y: 0.0),   // 6 = 0 is not needed      0   .   .   .   1
    ];

    // triangles: RawTriangulation { vertices: [0.0, 0.0, 4.0, 0.0, 4.0, 1.0, 1.0, 1.0, 1.0, 4.0, 0.0, 4.0, 0.0, 0.0],
    // triangle_indices: [0, 1, 2,  3, 4, 5,  0, 2, 3,  3, 5, 0] }
    //                   [5, 0, 1,  1, 2, 3,  3, 4, 5,  5, 1, 3]

    let polygon2 = polygon![
        /*0*/ (x:6.4547957402946095  ,y:11.017547999659882),
        /*1*/ (x:-11.519503887031526 ,y:6.183828000020526),
        /*2*/ (x:-9.235014373454396  ,y:-2.3057399997054517),
        /*3*/ (x:-3.200464929037099  ,y:-0.6833879996958103),
        /*4*/ (x:-0.4202638763939972 ,y:-11.017547999659882),
        /*5*/ (x:11.51953373339904   ,y:-7.795067999900311),
        // (x:6.4547957402946095  ,y:11.017547999659882),
    ];

    // [5, 0, 1,  1, 2, 3,  3, 4, 5,  5, 1, 3]

    //6.4547957402946095, 11.017547999659882,
    //-11.519503887031526, 6.183828000020526,
    //-9.235014373454396, -2.3057399997054517,
    //-3.200464929037099, -0.6833879996958103,
    //-0.4202638763939972, -11.017547999659882,
    //11.51953373339904, -7.795067999900311,
    //6.4547957402946095, 11.017547999659882]
    //
    // { vertices: [6.4547957402946095, 11.017547999659882, -11.519503887031526, 6.183828000020526, -9.235014373454396, -2.3057399997054517, -3.200464929037099, -0.6833879996958103, -0.4202638763939972, -11.017547999659882, 11.51953373339904, -7.795067999900311, 6.4547957402946095, 11.017547999659882],
    //
    let triangles = polygon2.earcut_triangles_raw();
    println!("triangles-2: {:?}", triangles);

    // polygon: POLYGON((6.4547957402946095 11.017547999659882,-11.519503887031526 6.183828000020526,-9.235014373454396 -2.3057399997054517,-3.200464929037099 -0.6833879996958103,-0.4202638763939972 -11.017547999659882,11.51953373339904 -7.795067999900311,6.4547957402946095 11.017547999659882))
    // triangles: RawTriangulation { vertices: [6.4547957402946095, 11.017547999659882, 11.51953373339904, -7.795067999900311, -0.4202638763939972, -11.017547999659882, -3.200464929037099, -0.6833879996958103, -9.235014373454396, -2.3057399997054517, -11.519503887031526, 6.183828000020526, 6.4547957402946095, 11.017547999659882], triangle_indices: [1, 6, 5, 5, 4, 3, 3, 2, 1, 1, 5, 3] }

    let triangles = polygon.earcut_triangles_raw();
    println!("triangles: {:?}", triangles);

    assert_eq!(
        triangles.triangle_indices,
        //vec![0, 1, 2, 3, 4, 5, 0, 2, 3, 3, 5, 0]
        vec![5, 0, 1, 1, 2, 3, 3, 4, 5, 5, 1, 3]
    );
}
